/**
 *@NApiVersion 2.1
*@NScriptType Restlet
*/

const opcoes = {
    enableSourcing: true,
    ignoreMandatoryFields: true
}

define(['N/error', 'N/log', 'N/query', 'N/record', 'N/search', 'N/task', 'N/transaction'], (error, log, query, record, search, task, transaction) => {
const atualizarTransacao = (tipo, idInterno, valores) => {
    record.submitFields({type: tipo,
        id: idInterno,
        values: valores,
        options: opcoes        
    });
    log.audit('atualilzarTransacao', {status: 'Sucesso', tipo: tipo, idInterno: idInterno, valores: valores});
}

const anularTransacao = (tipo, id) => {
    log.audit('anularTranscao', {tipo: tipo, id: id});

    try {
        var voidTransaction = transaction.void({
            type: tipo,
            id: id
        });
        log.audit('voidTransaction', voidTransaction);

        var lkpBoleto = search.lookupFields({type: tipo,
            id: id,
            columns: ['status','tranid']
        });
        log.audit('lkpBoleto', lkpBoleto);

        return {
            boleto: lkpBoleto.tranid,
            status: lkpBoleto.status
        }           
    } catch(e) {
        log.error('Erro anularTransacao', e);
        return e;
    }
}

const _put = (context) => {
    log.audit('put', context);
    // anularTransacao('creditmemo', 178746);

    var sucesso = [];
    var erro = [];

    for (i=0; i<context.ids.length; i++) {
        var journalentry = context.ids[i];

        try {
            record.delete({type: context.type, id: context.ids[i]});
            log.audit('Excluído!', {journalentry: context.ids[i]});
            sucesso.push(journalentry);
        } catch(e) {
            log.audit('Erro excluir!', {journalentry: context.ids[i], msg: e});
            erro.push(journalentry);
        }
    }

    if (sucesso.length > 0 || erro.length > 0) {
        return {
            status: 'Processado',
            sucesso: sucesso,
            erro: erro
        }
    } else {
        return {
            status: 'Não-processado'
        }
    }
}

const _post2 = (context) => {
    log.audit('_post2', context);

    var Record, soId, lkpSO, salesOrder;
    var parcelas = []; 
    
    Record = record.create({type: 'salesorder', isDynamic: true});
    
    Object.keys(context).forEach(function(bodyField) {
        if (bodyField == 'duedate' || bodyField == 'custbody_rsc_finan_dateativacontrato' || bodyField == 'custbody_lrc_data_chave' || bodyField == 'custbody_lrc_data_previsao_entrega' || 
        bodyField == 'custbody_lrc_data_previsao_entrega' || bodyField == 'custbody_lrc_data_liberacao_chave' || bodyField == 'custbody_rsc_data_venda' || bodyField == 'custbody_rsc_ultima_atualizacao') {    
            var split = context[bodyField].split('/');

            Record.setValue(bodyField, new Date(split[2], split[1] - 1, split[0]));
        } else {
            Record.setValue(bodyField, context[bodyField]);
        }
    });

    // Record.setValue('orderstatus', 'B'); // Faturamento pendente
    
    Record.selectNewLine('item')
    .setCurrentSublistValue('item', 'item', context.itens[0].item)
    .setCurrentSublistValue('item', 'quantity', context.itens[0].quantity)
    .setCurrentSublistValue('item', 'rate', context.itens[0].rate)
    .setCurrentSublistValue('item', 'amount', context.itens[0].amount)
    .commitLine('item');

    soId = Record.save({ignoreMandatoryFields: true});

    lkpSO = search.lookupFields({type: 'salesorder',
        id: soId,
        columns: ['tranid','location']
    });
    log.audit('Contrato gerado!', {id: soId, traind: lkpSO.tranid});

    const gerarProponente = (idCliente, principal, participacao, idPedido) => {
        // log.audit('gerarProponente', {
        //     idCliente: idCliente,
        //     principal: principal,
        //     participacao: participacao,
        //     idPedido: idPedido
        // });

        var proponente = record.create({type: 'customrecord_rsc_finan_client_contrato'});

        proponente.setValue('custrecord_rsc_clientes_contratos', idCliente)
        .setValue('custrecord_rsc_principal', principal)
        .setValue('custrecord_rsc_pct_part', participacao)
        .setValue('custrecord_rsc_fat_contrato', idPedido);
    
        var idProponente = proponente.save();
        log.audit('Contrato', {idProponente: idProponente, idPedido: idPedido, tranid: lkpSO.tranid});  

        return idProponente;
    }

    // const gerarEscritura = (idPedido, idCliente, empreendimento, unidade, statusEsc, dataEsc) => {
    //     // log.audit('gerarEscritura', {
    //     //     idPedido: idPedido,
    //     //     idCliente: idCliente,
    //     //     empreendimento: empreendimento,
    //     //     unidade: unidade,
    //     //     statusEsc: statusEsc,
    //     //     dataEsc: dataEsc
    //     // });

    //     var escrituracao = record.create({type: 'customrecord_lrc_controle_escrituracao'});

    //     var hoje = new Date();
    //     var umAno = new Date();
    //     umAno.setDate(umAno.getDate()+365)
    //     var umAnoE1Dia = new Date();
    //     umAnoE1Dia.setDate(umAnoE1Dia.getDate()+366)

    //     escrituracao.setValue('custrecord_lrc_fatura_de_venda', idPedido)
    //     .setValue('custrecord_lrc_cliente_ce', idCliente)
    //     .setValue('custrecord_lrc_empreendimento_fatura', empreendimento)
    //     .setValue('custrecord_lrc_unidade_vendida', unidade)
    //     .setValue('custrecord_lrc_tipo_escrituracao', statusEsc)    
    //     .setValue('custrecord_lrc_status_escrituracao', dataEsc)
    //     .setValue('custrecord_lrc_data_escrituracao', hoje)
    //     .setValue('custrecord_lrc_data_entrega_construcao', umAno)
    //     .setValue('custrecord_lrc_data_procurador', umAnoE1Dia);
    
    //     var idEscrituracao = escrituracao.save();
    //     log.audit('Contrato', {idEscrituracao: idEscrituracao, idPedido: idPedido, tranid: lkpSO.tranid});
        
    //     record.load({
    //         type: 'salesorder',
    //         id: idPedido,
    //         isDynamic: true
    //     })
    //     .setValue('custbody_lrc_fat_controle_escrituracao', idEscrituracao)
    //     .save({ignoreMandatoryFields: true});

    //     return idEscrituracao;
    // }   

    salesOrder = {        
        // idEscrituracao: gerarEscritura(soId, context.entity, context.custbody_rsc_projeto_obra_gasto_compra, context.custbody_rsc_tran_unidade, 1, 1),
        idProponente: gerarProponente(context.entity, true, 1000, soId),
        id: soId,
        tranid: lkpSO.tranid
    }

    var campos = {};

    // try {
        if (context.custbody_rsc_terms) {
            switch(context.custbody_rsc_terms) {
                case '6': // 3 parcelas
                    quantidadeParcelas = 3;
                    for (n=0; n<quantidadeParcelas; n++) {
                        Record = record.transform({
                            fromType: 'salesorder',
                            fromId: soId,
                            toType: 'invoice',
                            isDynamic: true
                        });

                        Record.setValue('createdfrom', soId)
                        .setValue('approvalstatus', 1) // Aprovação do supervisor pendente
                        .setValue('custbody_rsc_tipo_transacao_workflow', 25) // PV - Proposta
                        .setValue('custbody_lrc_fatura_principal', soId)
                        .setValue('terms', '');
                        
                        var data = context['duedate'];
                        var split = data.split('/');
                        novaData = new Date(split[2], split[1] - 1, split[0]);
                        nd = novaData.setMonth(novaData.getMonth()+n);
                        var dia = new Date(nd).getDate();
                        var mes = new Date(nd).getMonth()+1;         

                        if (mes == 2 && dia > 28) {   
                            nd = novaData.setDate(28);
                        }

                        if ((mes == 4 || mes == 6 || mes == 9 || mes == 11) && dia > 30) {
                            nd = novaData.setDate(30);
                        }
                        
                        Record.setValue('duedate', n == 0 ? novaData : new Date(nd));

                        // Última atualização
                        var ultimaAtualizacao = context['custbody_rsc_ultima_atualizacao'];
                        var splitUA = ultimaAtualizacao.split('/');
                        novaUA = new Date(splitUA[2], splitUA[1] - 1, splitUA[0]);

                        Record.setValue('custbody_rsc_ultima_atualizacao', novaUA);

                        Record.selectLine('item', 0)
                        .setCurrentSublistValue('item', 'item', 28650) // Fração Principal
                        .setCurrentSublistValue('item', 'quantity', context.itens[0].quantity)
                        .setCurrentSublistValue('item', 'rate', context.itens[0].rate / quantidadeParcelas)
                        .setCurrentSublistValue('item', 'amount', context.itens[0].amount / quantidadeParcelas)
                        .commitLine('item');

                        var idParcela = Record.save({ignoreMandatoryFields: true});

                        // atualizarTransacao('invoice', idParcela, campos);
                
                        parcelas.push({
                            id: idParcela,
                            tranid: search.lookupFields({type: 'invoice',
                                id: idParcela,
                                columns: ['tranid']
                            }).tranid
                        });
                        //  log.audit('parcelas', parcelas);
                    }          
                break;

                case '5': // 12 parcelas
                    quantidadeParcelas = 12;
                    for (n=0; n<quantidadeParcelas; n++) {
                        Record = record.transform({
                            fromType: 'salesorder',
                            fromId: soId,
                            toType: 'invoice',
                            isDynamic: true
                        });

                        Record.setValue('createdfrom', soId)
                        .setValue('approvalstatus', 1) // Aprovação do supervisor pendente
                        .setValue('custbody_rsc_tipo_transacao_workflow', 25) // PV - Proposta
                        .setValue('custbody_lrc_fatura_principal', soId)
                        .setValue('terms', '');;
                        
                        var data = context['duedate'];
                        var split = data.split('/');
                        novaData = new Date(split[2], split[1] - 1, split[0]);
                        nd = novaData.setMonth(novaData.getMonth()+n);
                        var dia = new Date(nd).getDate();
                        var mes = new Date(nd).getMonth()+1;

                        if (mes == 2 && dia > 28) {
                            nd = novaData.setDate(28);
                        }

                        if ((mes == 4 || mes == 6 || mes == 9 || mes == 11) && dia > 30) {
                            nd = novaData.setDate(30);
                        }
                        
                        Record.setValue('duedate', n == 0 ? novaData : new Date(nd));

                        // Última atualização
                        var ultimaAtualizacao = context['custbody_rsc_ultima_atualizacao'];
                        var splitUA = ultimaAtualizacao.split('/');
                        novaUA = new Date(splitUA[2], splitUA[1] - 1, splitUA[0]);

                        Record.setValue('custbody_rsc_ultima_atualizacao', novaUA);

                        Record.selectLine('item', 0)
                        .setCurrentSublistValue('item', 'item', 28650) // Fração Principal
                        .setCurrentSublistValue('item', 'quantity', context.itens[0].quantity)
                        .setCurrentSublistValue('item', 'rate', context.itens[0].rate / quantidadeParcelas)
                        .setCurrentSublistValue('item', 'amount', context.itens[0].amount / quantidadeParcelas)
                        .commitLine('item');

                        var idParcela = Record.save({ignoreMandatoryFields: true});
                
                        parcelas.push({
                            id: idParcela,
                            tranid: search.lookupFields({type: 'invoice',
                                id: idParcela,
                                columns: ['tranid']
                            }).tranid
                        });
                        //  log.audit('parcelas', parcelas);
                    }
                break;

                case '4': // À VISTA
                    quantidadeParcelas = 1;
                    for (n=0; n<quantidadeParcelas; n++) {
                        Record = record.transform({
                            fromType: 'salesorder',
                            fromId: soId,
                            toType: 'invoice',
                            isDynamic: true
                        });

                        Record.setValue('createdfrom', soId)
                        .setValue('approvalstatus', 1) // Aprovação do supervisor pendente
                        .setValue('custbody_rsc_tipo_transacao_workflow', 25) // PV - Proposta
                        .setValue('custbody_lrc_fatura_principal', soId)
                        .setValue('terms', '');;
                        
                        var data = context['duedate'];
                        var split = data.split('/');
                        novaData = new Date(split[2], split[1] - 1, split[0]);
                        nd = novaData.setMonth(novaData.getMonth()+n);
                        var dia = new Date(nd).getDate();
                        var mes = new Date(nd).getMonth()+1;

                        if (mes == 2 && dia > 28) {
                            nd = novaData.setDate(28);
                        }

                        if ((mes == 4 || mes == 6 || mes == 9 || mes == 11) && dia > 30) {
                            nd = novaData.setDate(30);
                        }
                        
                        Record.setValue('duedate', n == 0 ? novaData : new Date(nd));

                        // Última atualização
                        var ultimaAtualizacao = context['custbody_rsc_ultima_atualizacao'];
                        var splitUA = ultimaAtualizacao.split('/');
                        novaUA = new Date(splitUA[2], splitUA[1] - 1, splitUA[0]);

                        Record.setValue('custbody_rsc_ultima_atualizacao', novaUA);

                        Record.selectLine('item', 0)
                        .setCurrentSublistValue('item', 'item', 28650) // Fração Principal
                        .setCurrentSublistValue('item', 'quantity', context.itens[0].quantity)
                        .setCurrentSublistValue('item', 'rate', context.itens[0].rate / quantidadeParcelas)
                        .setCurrentSublistValue('item', 'amount', context.itens[0].amount / quantidadeParcelas)
                        .commitLine('item');

                        var idParcela = Record.save({ignoreMandatoryFields: true});
                
                        parcelas.push({
                            id: idParcela,
                            tranid: search.lookupFields({type: 'invoice',
                                id: idParcela,
                                columns: ['tranid']
                            }).tranid
                        });
                        //  log.audit('parcelas', parcelas);
                    }
                break;

                case '3': // 2 parcelas
                    quantidadeParcelas = 2;
                    for (n=0; n<quantidadeParcelas; n++) {
                        Record = record.transform({
                            fromType: 'salesorder',
                            fromId: soId,
                            toType: 'invoice',
                            isDynamic: true
                        });

                        Record.setValue('createdfrom', soId)
                        .setValue('approvalstatus', 1) // Aprovação do supervisor pendente
                        .setValue('custbody_rsc_tipo_transacao_workflow', 25) // PV - Proposta
                        .setValue('custbody_lrc_fatura_principal', soId)
                        .setValue('terms', '');
                        
                        var data = context['duedate'];
                        var split = data.split('/');
                        novaData = new Date(split[2], split[1] - 1, split[0]);
                        nd = novaData.setMonth(novaData.getMonth()+n);
                        var dia = new Date(nd).getDate();
                        var mes = new Date(nd).getMonth()+1;         

                        if (mes == 2 && dia > 28) {   
                            nd = novaData.setDate(28);
                        }

                        if ((mes == 4 || mes == 6 || mes == 9 || mes == 11) && dia > 30) {
                            nd = novaData.setDate(30);
                        }
                        
                        Record.setValue('duedate', n == 0 ? novaData : new Date(nd));

                        // Última atualização
                        var ultimaAtualizacao = context['custbody_rsc_ultima_atualizacao'];
                        var splitUA = ultimaAtualizacao.split('/');
                        novaUA = new Date(splitUA[2], splitUA[1] - 1, splitUA[0]);

                        Record.setValue('custbody_rsc_ultima_atualizacao', novaUA);

                        Record.selectLine('item', 0)
                        .setCurrentSublistValue('item', 'item', 28650) // Fração Principal
                        .setCurrentSublistValue('item', 'quantity', context.itens[0].quantity)
                        .setCurrentSublistValue('item', 'rate', context.itens[0].rate / quantidadeParcelas)
                        .setCurrentSublistValue('item', 'amount', context.itens[0].amount / quantidadeParcelas)
                        .commitLine('item');

                        var idParcela = Record.save({ignoreMandatoryFields: true});

                        // atualizarTransacao('invoice', idParcela, campos);
                
                        parcelas.push({
                            id: idParcela,
                            tranid: search.lookupFields({type: 'invoice',
                                id: idParcela,
                                columns: ['tranid']
                            }).tranid
                        });
                        //  log.audit('parcelas', parcelas);
                    }          
                break;

                case '2': // Entrada + 240 parcelas
                    // corpo.duedate = fatura.getValue('duedate');
                    // corpo.item = item;
                    // corpo.quantidadeParcelas = 241;
                    
                    // tarefaMR = task.create({
                    //     taskType: task.TaskType.MAP_REDUCE,
                    //     scriptId: 'customscript_rsc_fatura_gera_parcelas_mr',
                    //     deploymentId: 'customdeploy_rsc_fatura_gera_parcelas_mr',
                    //     params: {custscript_rsc_json_fatura: corpo}
                    // });
                    
                    // idTarefaMR = tarefaMR.submit();
                    // log.audit('idTarefaMR', idTarefaMR);
                    quantidadeParcelas = 100;
                    for (n=0; n<quantidadeParcelas; n++) {
                        Record = record.transform({
                            fromType: 'salesorder',
                            fromId: soId,
                            toType: 'invoice',
                            isDynamic: true
                        });

                        Record.setValue('createdfrom', soId)
                        .setValue('approvalstatus', 1) // Aprovação do supervisor pendente
                        .setValue('custbody_rsc_tipo_transacao_workflow', 25) // PV - Proposta
                        .setValue('custbody_lrc_fatura_principal', soId)
                        .setValue('terms', '');;
                        
                        var data = context['duedate'];
                        var split = data.split('/');
                        novaData = new Date(split[2], split[1] - 1, split[0]);
                        nd = novaData.setMonth(novaData.getMonth()+n);
                        var dia = new Date(nd).getDate();
                        var mes = new Date(nd).getMonth()+1;         

                        if (mes == 2 && dia > 28) {   
                            nd = novaData.setDate(28);
                        }

                        if ((mes == 4 || mes == 6 || mes == 9 || mes == 11) && dia > 30) {
                            nd = novaData.setDate(30);
                        }
                        
                        Record.setValue('duedate', n == 0 ? novaData : new Date(nd));

                        // Última atualização
                        var ultimaAtualizacao = context['custbody_rsc_ultima_atualizacao'];
                        var splitUA = ultimaAtualizacao.split('/');
                        novaUA = new Date(splitUA[2], splitUA[1] - 1, splitUA[0]);

                        Record.setValue('custbody_rsc_ultima_atualizacao', novaUA);

                        Record.selectLine('item', 0)
                        .setCurrentSublistValue('item', 'item', 28650) // Fração Principal
                        .setCurrentSublistValue('item', 'quantity', context.itens[0].quantity)
                        .setCurrentSublistValue('item', 'rate', context.itens[0].rate / quantidadeParcelas)
                        .setCurrentSublistValue('item', 'amount', context.itens[0].amount / quantidadeParcelas)
                        .commitLine('item');

                        var idParcela = Record.save({ignoreMandatoryFields: true});
                
                        parcelas.push({
                            id: idParcela,
                            tranid: search.lookupFields({type: 'invoice',
                                id: idParcela,
                                columns: ['tranid']
                            }).tranid
                        });
                        //  log.audit('parcelas', parcelas);
                    }      
                break;

                case '1':
                    quantidadeParcelas = 100;
                    for (n=0; n<quantidadeParcelas; n++) {
                        Record = record.transform({
                            fromType: 'salesorder',
                            fromId: soId,
                            toType: 'invoice',
                            isDynamic: true
                        });

                        Record.setValue('createdfrom', soId)
                        .setValue('approvalstatus', 1) // Aprovação do supervisor pendente
                        .setValue('custbody_rsc_tipo_transacao_workflow', 25) // PV - Proposta
                        .setValue('custbody_lrc_fatura_principal', soId)
                        .setValue('terms', '');;
                        
                        var data = context['duedate'];
                        var split = data.split('/');
                        novaData = new Date(split[2], split[1] - 1, split[0]);
                        nd = novaData.setMonth(novaData.getMonth()+n);
                        var dia = new Date(nd).getDate();
                        var mes = new Date(nd).getMonth()+1;

                        if (mes == 2 && dia > 28) {
                            nd = novaData.setDate(28);
                        }

                        if ((mes == 4 || mes == 6 || mes == 9 || mes == 11) && dia > 30) {
                            nd = novaData.setDate(30);
                        }
                        
                        Record.setValue('duedate', n == 0 ? novaData : new Date(nd));

                        // Última atualização
                        var ultimaAtualizacao = context['custbody_rsc_ultima_atualizacao'];
                        var splitUA = ultimaAtualizacao.split('/');
                        novaUA = new Date(splitUA[2], splitUA[1] - 1, splitUA[0]);

                        Record.setValue('custbody_rsc_ultima_atualizacao', novaUA);

                        Record.selectLine('item', 0)
                        .setCurrentSublistValue('item', 'item', 28650) // Fração Principal
                        .setCurrentSublistValue('item', 'quantity', context.itens[0].quantity)
                        .setCurrentSublistValue('item', 'rate', context.itens[0].rate / quantidadeParcelas)
                        .setCurrentSublistValue('item', 'amount', context.itens[0].amount / quantidadeParcelas)
                        .commitLine('item');

                        var idParcela = Record.save({ignoreMandatoryFields: true});
                
                        parcelas.push({
                            id: idParcela,
                            tranid: search.lookupFields({type: 'invoice',
                                id: idParcela,
                                columns: ['tranid']
                            }).tranid
                        });
                        //  log.audit('parcelas', parcelas);
                    }        
                break;

                default: ''; break;
            }
        }
    // } catch(e) {
    //     log.error('Erro', e);

    //     if (e.error.code == 'DATE_EXPECTED' || e.error.code == 'INVALID_INITIALIZE_REF') {                
    //         parcelas.push({
    //             id: idParcela,
    //             tranid: search.lookupFields({type: 'invoice',
    //                 id: idParcela,
    //                 columns: ['tranid']
    //             }).tranid
    //         });
    //         //  log.audit('parcelas', parcelas);
    //     }
    // }
    
    log.audit('return', {salesOrder: salesOrder, parcelas: parcelas});

    return {
        salesOrder: salesOrder,
        parcelas: parcelas        
    }
}

const _post = (context) => {
    log.audit('_post', context);

    var mrTask = task.create({
        taskType: task.TaskType.MAP_REDUCE,
        scriptId: 'customscript_rsc_cnab_return_mr',
        params: {
            custscript_rsc_cnab_returndata_ds: context
        }
    });

    var mrTaskId = mrTask.submit();
    log.audit('mrTaskId', mrTaskId);

    return mrTaskId;
}

const _get2 = (context) => {
    log.audit('get2', context);

    var faturas_sem_preco_unitario = [
        // 644737,
        // 644736,
        // 644122,
        // 644121,
        // 644120,
        // 643414,
        // 643413,
        // 643412,
        // 643003,
        // 642602,
        // 642601,
        // 642392,
        // 641995,
        // 641994,
        // 641593,
        // 641592,
        // 640781,
        // 640780,
        // 640779,
        // 640777,
        // 640184,
        // 640183,
        // 640182,
        // 640180,
        // 640179,
        // 640178,
        // 640173,
        // 639873,
        // 639872,
        // 639871,
        // 638836,
        // 638835,
        // 637799,
        // 637798,
        // 635854,
        // 635654,
        // 631640,
        // 630940,
        // 630939,
        // 627825,
        // 627824,
        // 620895,
        // 620894,
        // 618249,
        // 618248,
        // 618247,
        // 618246,
        // 618243,
        // 618242,
        // 618241,
        // 618240,
        // 618239,
        // 618238,
        // 616067,
        // 615663,
        // 614955,
        // 611134,
        // 611133,
        // 611630,
        // 611231,
        // 611131,
        // 611130,
        // 610110,
        // 610109,
        // 607899,
        // 607080,
        // 607079,
        // 607077,
        // 606779,
        // 606778,
        // 605088,
        // 605087,
        // 605086,
        // 605085,
        // 605084,
        // 605083,
        // 605082,
        // 605081,
        // 605080,
        // 605079,
        // 605078,
        // 605077,
        // 596358,
        // 596357,
        // 596356,
        // 596355,
        // 596354,
        // 596353,
        // 596352,
        // 596351,
        // 596350,
        // 596349,
        // 596348,
        // 595944,
        // 595943,
        // 595942,
        // 595432,
        // 591678,
        590318,
        590307,
        590305,
        590303,
        590302,
        590301,
        590300,
        590299,
        590298,
        590297,
        590296,
        590295,
        590294,
        590293,
        590292,
        590291,
        590290,
        590289,
        590287,
        588869,
        589564,
        588866,
        589262,
        588863,
        588860,
        588056,
        588055,
        588054,
        588053,
        588052,
        588051,
        588050,
        588049,
        588048,
        588047,
        588046,
        588045,
        588044,
        588043,
        588042,
        588041,
        588040,
        588039,
        588038,
        588037,
        588036,
        588035,
        588034,
        588033,
        588032,
        588031,
        588030,
        588029,
        588028,
        588027,
        588026,
        588025,
        588024,
        588023,
        588022,
        588021,
        588020,
        588019,
        588018,
        588017,
        588016,
        588015,
        588014,
        588013,
        588012,
        588011,
        588010,
        588009,
        588007,
        588006,
        588005,
        588004,
        588003,
        588002,
        588001,
        588000,
        587999,
        587998,
        587997,
        585447,
        585446,
        585445,
        585444,
        585443,
        585442,
        585441,
        585440,
        585438,
        585436,
        585435,
        585434,
        585433,
        585432,
        585431,
        585430,
        585429,
        585428,
        585427,
        585426,
        585425,
        585424,
        585423,
        585421,
        585420,
        585419,
        585417,
        585415,
        585414,
        585413,
        585411,
        585410,
        585409,
        585407,
        585406,
        585405,
        585404,
        585402,
        585401,
        585400,
        585399,
        578629,
        577435,
        577433,
        577430,
        577428,
        577426,
        577424,
        577422,
        577418,
        577112,
        576626,
        572958,
        570116,
        569511,
        569510,
        568414,
        568413,
        568412,
        568411,
        568410,
        568409,
        568109,
        567404,
        567203,
        566191,
        566190,
        566189,
        566188,
        565788,
        564781,
        564179,
        564178,
        564177,
        564176,
        563062,
        563061,
        563060,
        563059,
        562982,
        562981,
        562980,
        562979,
        562978,
        562977,
        562976,
        562975,
        562974,
        562973,
        562972,
        562971,
        562969,
        562968,
        562967,
        562966,
        562965,
        562964,
        562963,
        562962,
        562961,
        562960,
        562959,
        562958,
        562856,
        562855,
        562854,
        562853,
        562852,
        562851,
        562850,
        562849,
        562848,
        562847,
        562846,
        562845,
        562625,
        562527,
        562526,
        562524,
        562519,
        562320,
        560615,
        560614,
        560613,
        560611,
        560610,
        560609,
        560608,
        560607,
        559380,
        559289,
        559288,
        559287,
        559286,
        559285,
        559284,
        559283,
        559282,
        559281,
        559280,
        559179,
        558868,
        558867,
        558866,
        558865,
        558864,
        558863,
        558862,
        558861,
        558860,
        558760,
        558759,
        556838,
        552937,
        550093,
        550091,
        550089,
        550087,
        550085,
        550083,
        550081,
        550079,
        550077,
        550075,
        550073,
        550071,
        550069,
        550067,
        550065,
        550063,
        550061,
        550059,
        550057,
        550055,
        550053,
        550051,
        550049,
        550047,
        550045,
        550043,
        550041,
        550039,
        550037,
        550035,
        550033,
        550031,
        550029,
        550027,
        550025,
        550023,
        550021,
        547275,
        547274,
        547273,
        547271,
        547270,
        547269,
        547267,
        547266,
        547265,
        547264,
        547263,
        547262,
        547261,
        547260,
        547259,
        547258,
        547257,
        547256,
        547255,
        547254,
        547253,
        547252,
        547251,
        547250,
        456245,
        448070,
        447962,
        447822,
        447818,
        447723,
        447722,
        447717,
        447619,
        447618,
        447519,
        447518,
        447320,
        447319,
        447516,
        447418,
        447417,
        447415,
        447414,
        447413,
        447314,
        447313,
        447214,
        447213,
        447211,
        447210,
        447209,
        447208,
        446302,
        446301,
        446298,
        446201,
        446200,
        446198,
        446197,
        446291,
        446195,
        446194,
        446192,
        446191,
        446287,
        446186,
        446087,
        446086,
        446084,
        445983,
        445982,
        445938,
        445937,
        445934,
        445933,
        445932,
        445931,
        445930,
        445929,
        445928,
        445927,
        445925,
        445923,
        445883,
        445882,
        445862,
        445851,
        445761,
        445741,
        445722,
        445683,
        445682,
        445624,
        445619,
        445589,
        445427,
        445380,
        445220,
        445177,
        445157,
        445133,
        445051,
        444970,
        444969,
        444883,
        444839,
        444798,
        444758,
        444718,
        444622,
        444575,
        444534,
        444489,
        444362,
        444277,
        444182,
        444145,
        443951,
        443950,
        443949,
        443981,
        443980,
        443905,
        443903,
        443828,
        443827,
        443826,
        443825,
        443824,
        443823,
        443822,
        443821,
        443820,
        443819,
        443814,
        443813,
        443787,
        443658,
        443684,
        443683,
        443579,
        443478,
        443440,
        443426,
        443397,
        443384,
        443375,
        443348,
        443297,
        443250,
        443194,
        443159,
        443081,
        442998,
        442997,
        442996,
        442995,
        442911,
        442910,
        442861,
        442811,
        442764,
        442726,
        442725,
        442724,
        442723,
        442722,
        442720,
        442719,
        442717,
        442716,
        442713,
        442659,
        442622,
        442621,
        442526,
        442525,
        442524,
        442523,
        442522,
        442521,
        442520,
        442519,
        442518,
        442517,
        442516,
        442515,
        442514,
        442494,
        442468,
        442341,
        442288,
        442267,
        442223,
        442222,
        442167,
        442165,
        442143,
        442142,
        442141,
        442140,
        442139,
        442138,
        442137,
        442131,
        442091,
        442042,
        441951,
        441906,
        441832,
        441761,
        441759,
        441787,
        441758,
        441756,
        441755,
        441753,
        441752,
        441751,
        441750,
        441749,
        441748,
        441644,
        441717,
        441706,
        441680,
        441569,
        441551,
        441544,
        441541,
        441456,
        441414,
        441376,
        441413,
        441361,
        441398,
        441272,
        441271,
        441270,
        441269,
        441268,
        441267,
        441266,
        441265,
        441264,
        441263,
        441262,
        441261,
        441260,
        441259,
        441258,
        441257,
        441256,
        441255,
        441254,
        441253,
        441252,
        441251,
        441250,
        441249,
        441248,
        441247,
        441246,
        441245,
        441244,
        441243,
        441242,
        441158,
        441241,
        441155,
        441240,
        441153,
        441239,
        441151,
        441149,
        441147,
        441145,
        441143,
        441141,
        441139,
        441137,
        441135,
        441133,
        441131,
        441129,
        441181,
        441046,
        440888,
        440777,
        440755,
        440754,
        440753,
        440752,
        440751,
        440750,
        440749,
        440748,
        440747,
        440746,
        440745,
        440813,
        440744,
        440812,
        440743,
        440811,
        440742,
        440810,
        440741,
        440740,
        440806,
        440739,
        440786,
        440719,
        440570,
        440474,
        440528,
        440472,
        440470,
        440468,
        440466,
        440464,
        440462,
        440460,
        440458,
        440456,
        440454,
        440452,
        440450,
        440448,
        440446,
        440444,
        440442,
        440440,
        440438,
        440436,
        440434,
        440485,
        440273,
        440271,
        440343,
        440301,
        440300,
        440200,
        440198,
        440066,
        439984,
        439983,
        439961,
        439958,
        439940,
        439840,
        439923,
        439885,
        439798,
        439744,
        439673,
        439742,
        439740,
        439738,
        439736,
        439734,
        439732,
        439730,
        439728,
        439726,
        439724,
        439722,
        439700,
        439698,
        439696,
        439694,
        439692,
        439690,
        439688,
        439686,
        439684,
        439682,
        439680,
        439578,
        439576,
        439574,
        439572,
        439570,
        439568,
        439566,
        439564,
        439594,
        439562,
        439560,
        439558,
        439556,
        439554,
        439552,
        439550,
        439548,
        439539,
        439537,
        439535,
        439533,
        439531,
        439529,
        439527,
        439525,
        439523,
        439521,
        439519,
        439517,
        439515,
        439513,
        439441,
        439511,
        439509,
        439507,
        439505,
        439503,
        439501,
        439499,
        439497,
        439495,
        439493,
        439396,
        439246,
        439093,
        439083,
        439012,
        439006,
        438874,
        438736,
        438782,
        438551,
        438598,
        438597,
        438596,
        438348,
        438346,
        438337,
        438413,
        438335,
        438333,
        438331,
        438329,
        438327,
        438325,
        438323,
        438321,
        438163,
        438141,
        438225,
        438125,
        438185,
        437946,
        437905,
        437904,
        437901,
        437980,
        437877,
        437761,
        437690,
        437656,
        437654,
        437506,
        437441,
        437364,
        437284,
        437140,
        437100,
        436859,
        436817,
        436578,
        436768,
        436539,
        436685,
        436683,
        436364,
        436362,
        436360,
        436357,
        436355,
        436353,
        436351,
        436349,
        436347,
        436345,
        436343,
        436214,
        436213,
        436212,
        436211,
        436210,
        436209,
        436177,
        436128,
        436126,
        436124,
        436122,
        436120,
        436118,
        436116,
        436114,
        436112,
        436029,
        436110,
        436028,
        436108,
        436106,
        436104,
        436102,
        436100,
        436098,
        436096,
        436094,
        436092,
        436084,
        436081,
        436079,
        435977,
        435975,
        435987,
        435945,
        435943,
        435941,
        435939,
        435937,
        435935,
        435933,
        435931,
        435929,
        435927,
        435925,
        435923,
        435921,
        435919,
        435917,
        435915,
        435846,
        435913,
        435911,
        435909,
        435907,
        435799,
        435572,
        435540,
        435668,
        435539,
        435538,
        435497,
        435595,
        435593,
        435591,
        435588,
        435586,
        435377,
        435352,
        435287,
        435206,
        435204,
        435072,
        435141,
        435036,
        435033,
        434858,
        434857,
        434911,
        434810,
        434716,
        434714,
        434712,
        434710,
        434708,
        434706,
        434704,
        434702,
        434700,
        434665,
        434698,
        434696,
        434694,
        434692,
        434690,
        434688,
        434686,
        434684,
        434477,
        434483,
        434438,
        434346,
        434310,
        434308,
        434306,
        434255,
        434174,
        434162,
        434160,
        434158,
        434156,
        434154,
        434152,
        434150,
        434148,
        434146,
        434144,
        434142,
        434140,
        434138,
        434136,
        434134,
        434189,
        434132,
        434130,
        434128,
        434126,
        434124,
        434122,
        434120,
        434118,
        434116,
        434114,
        434112,
        434110,
        434108,
        434106,
        434104,
        434064,
        434019,
        433917,
        433916,
        433915,
        433914,
        433913,
        433912,
        433911,
        433980,
        433837,
        433770,
        433798,
        433797,
        433658,
        433611,
        433284,
        433254,
        433094,
        432953,
        432933,
        432932,
        432931,
        432882,
        432832,
        432831,
        432830,
        432829,
        432828,
        432827,
        432826,
        432825,
        432824,
        432823,
        432822,
        432821,
        432820,
        432819,
        432818,
        432817,
        432816,
        432815,
        432814,
        432813,
        432751,
        432812,
        432750,
        432811,
        432556,
        432386,
        432381,
        432380,
        432379,
        432278,
        432277,
        432276,
        432275,
        432274,
        432273,
        432272,
        432271,
        432270,
        432269,
        432268,
        432265,
        432263,
        432311,
        432310,
        432214,
        432212,
        432141,
        432139,
        432137,
        432020,
        432096,
        432094,
        432092,
        432090,
        432088,
        432086,
        432084,
        432082,
        432080,
        431978,
        431976,
        431974,
        431972,
        431970,
        431968,
        431966,
        431964,
        431962,
        431960,
        431958,
        431956,
        431877,
        431954,
        431876,
        431875,
        431874,
        431948,
        431873,
        431834,
        431653,
        431649,
        431648,
        431647,
        431646,
        431645,
        431644,
        431643,
        431642,
        431641,
        431683,
        431640,
        431681,
        431639,
        431679,
        431638,
        431577,
        431575,
        431637,
        431636,
        431573,
        431571,
        431635,
        431569,
        431567,
        431565,
        431563,
        431561,
        431633,
        431559,
        431557,
        431555,
        431553,
        431551,
        431549,
        431547,
        431545,
        431543,
        431541,
        431539,
        431537,
        431535,
        431533,
        431531,
        431519,
        431446,
        431336,
        431334,
        431332,
        431330,
        431328,
        431326,
        431324,
        431322,
        431320,
        431318,
        431316,
        431314,
        431312,
        431310,
        431402,
        431308,
        431306,
        431304,
        431302,
        431300,
        431298,
        431296,
        431294,
        431292,
        431290,
        431288,
        431286,
        431273,
        431156,
        431013,
        431012,
        430962,
        431007,
        430920,
        430868,
        430866,
        430864,
        430862,
        430860,
        430858,
        430856,
        430854,
        430852,
        430850,
        430848,
        430846,
        430844,
        430842,
        430840,
        430838,
        430836,
        430834,
        430832,
        430830,
        430828,
        430881,
        430826,
        430824,
        430809,
        430667,
        430665,
        430663,
        430661,
        430659,
        430657,
        430655,
        430653,
        430651,
        430725,
        430649,
        430647,
        430645,
        430619,
        430679,
        430437,
        430509,
        430371,
        430369,
        430396,
        430156,
        430069,
        430085,
        430084,
        430083,
        429980,
        429905,
        429762,
        429838,
        429760,
        429758,
        429756,
        429754,
        429752,
        429750,
        429748,
        429746,
        429744,
        429742,
        429740,
        429738,
        429736,
        429734,
        429732,
        429730,
        429728,
        429726,
        429724,
        429722,
        429720,
        429718,
        429716,
        429492,
        429362,
        429360,
        429358,
        429343,
        429341,
        429339,
        429337,
        429335,
        429401,
        429280,
        429175,
        429173,
        429171,
        429169,
        429257,
        429167,
        429165,
        429163,
        429161,
        429248,
        429159,
        429157,
        429155,
        429153,
        429151,
        429149,
        429147,
        429145,
        429143,
        429203,
        429202,
        429196,
        428976,
        428974,
        429012,
        429011,
        429010,
        428982,
        428854,
        428904,
        428902,
        428900,
        428898,
        428896,
        428894,
        428892,
        428890,
        428888,
        428886,
        428884,
        428882,
        428880,
        428878,
        428776,
        428774,
        428772,
        428770,
        428766,
        428764,
        428642,
        428463,
        428413,
        428373,
        428250,
        428247,
        428245,
        428243,
        428241,
        428239,
        428237,
        428235,
        428067,
        428130,
        427945,
        427930,
        427866,
        427929,
        427864,
        427928,
        427862,
        427927,
        427860,
        427926,
        427858,
        427925,
        427856,
        427924,
        427854,
        427923,
        427852,
        427850,
        427848,
        427846,
        427844,
        427921,
        427842,
        427840,
        427838,
        427836,
        427834,
        427817,
        427813,
        427811,
        427809,
        427807,
        427805,
        427878,
        427801,
        427799,
        427797,
        427795,
        427793,
        427791,
        427789,
        427787,
        427785,
        427783,
        427781,
        427779,
        427677,
        427675,
        427673,
        427671,
        427669,
        427667,
        427665,
        427736,
        427663,
        427661,
        427659,
        427657,
        427655,
        427653,
        427644,
        427642,
        427640,
        427638,
        427636,
        427634,
        427632,
        427630,
        427628,
        427626,
        427624,
        427622,
        427620,
        427618,
        427616,
        427614,
        427612,
        427610,
        427608,
        427606,
        427604,
        427602,
        427600,
        427598,
        427596,
        427594,
        427476,
        427552,
        427474,
        427470,
        427236,
        427171,
        427169,
        427167,
        427165,
        427163,
        427161,
        427159,
        427157,
        427155,
        427153,
        427151,
        427149,
        427147,
        427145,
        427051,
        427143,
        427141,
        427139,
        427137,
        427135,
        427133,
        427131,
        427129,
        427127,
        427009,
        426869,
        426937,
        426934,
        426931,
        426929,
        426927,
        426828,
        426786,
        426550,
        426591,
        426462,
        426422,
        426416,
        426350,
        426330,
        426271,
        426320,
        426063,
        426007,
        426006,
        425906,
        425881,
        425762,
        425740,
        425738,
        425734,
        425732,
        425791,
        425650,
        425619,
        425618,
        425617,
        425550,
        425616,
        425615,
        425614,
        425472,
        425471,
        425450,
        425425,
        425382,
        425001,
        424616,
        424473,
        424472,
        424471,
        424427,
        424385,
        424245,
        424209,
        424201,
        424059,
        424056,
        424019,
        422423,
        422422,
        422496,
        422421,
        422495,
        422420,
        422494,
        422419,
        422418,
        422493,
        422417,
        422492,
        422416,
        422491,
        422415,
        422490,
        422489,
        422413,
        422488,
        422412,
        422487,
        422411,
        422486,
        422410,
        422485,
        422409,
        422484,
        422408,
        422483,
        422407,
        422482,
        422406,
        422481,
        422405,
        422480,
        422404,
        422403,
        422479,
        422402,
        422478,
        422077,
        422401,
        422076,
        422400,
        422399,
        422075,
        422398,
        422074,
        422397,
        422073,
        422396,
        422072,
        422395,
        422071,
        422394,
        422070,
        422393,
        422069,
        422392,
        422068,
        422391,
        422067,
        422390,
        422066,
        422389,
        422065,
        422388,
        422064,
        422387,
        422063,
        422386,
        422062,
        422385,
        422384,
        422061,
        422383,
        422060,
        422382,
        422059,
        422381,
        422058,
        422380,
        422057,
        422379,
        422056,
        422378,
        422055,
        421977,
        422054,
        421976,
        422053,
        421975,
        422052,
        421974,
        422051,
        421973,
        422050,
        421972,
        422049,
        421971,
        422048,
        421970,
        421969,
        422047,
        421968,
        422046,
        421967,
        422045,
        421966,
        422044,
        421965,
        422043,
        421964,
        421963,
        422041,
        421962,
        422040,
        421961,
        422039,
        421960,
        421959,
        422038,
        421958,
        422037,
        422036,
        422035,
        421953,
        422034,
        421952,
        422033,
        421951,
        422032,
        421950,
        422031,
        421949,
        422030,
        421948,
        422029,
        421947,
        422028,
        421946,
        422027,
        421945,
        422026,
        421944,
        422025,
        421943,
        422024,
        421942,
        422023,
        421941,
        422022,
        421940,
        422021,
        421939,
        422020,
        421938,
        422019,
        421937,
        422018,
        421936,
        422017,
        421935,
        421934,
        422016,
        421933,
        422015,
        421932,
        422014,
        421931,
        422013,
        421930,
        422012,
        421929,
        422011,
        421928,
        422010,
        421927,
        422009,
        421926,
        422008,
        421925,
        422007,
        421924,
        422006,
        421923,
        422005,
        421922,
        422004,
        421921,
        422003,
        421920,
        422002,
        421919,
        421918,
        422001,
        421917,
        422000,
        421916,
        421999,
        421915,
        421998,
        421914,
        421997,
        421913,
        421996,
        421912,
        421995,
        421911,
        421994,
        421910,
        421993,
        421909,
        421992,
        421908,
        421907,
        421991,
        421906,
        421990,
        421905,
        421989,
        421904,
        421988,
        421903,
        421987,
        421902,
        421986,
        421985,
        421984,
        421897,
        421983,
        421896,
        421982,
        421895,
        421981,
        421894,
        421980,
        421893,
        421979,
        421892,
        421978,
        421891,
        421777,
        421890,
        421776,
        421889,
        421775,
        421888,
        421774,
        421887,
        421773,
        421886,
        421772,
        421885,
        421771,
        421884,
        421770,
        421883,
        421769,
        421882,
        421768,
        421881,
        421767,
        421880,
        421766,
        421879,
        421878,
        421765,
        421677,
        421764,
        421676,
        421763,
        421675,
        421762,
        421674,
        421761,
        421673,
        421760,
        421672,
        421759,
        421671,
        421758,
        421670,
        421757,
        421669,
        421756,
        421668,
        421755,
        421667,
        421754,
        421666,
        421753,
        421665,
        421752,
        421664,
        421663,
        421751,
        421750,
        421662,
        421661,
        421749,
        421660,
        421748,
        421659,
        421747,
        421658,
        421746,
        421657,
        421745,
        421656,
        421744,
        421655,
        421743,
        421654,
        421742,
        421653,
        421741,
        421652,
        421740,
        421651,
        421739,
        421650,
        421738,
        421649,
        421648,
        421737,
        421647,
        421736,
        421646,
        421735,
        421645,
        421734,
        421644,
        421733,
        421643,
        421642,
        421731,
        421641,
        421730,
        421640,
        421639,
        421728,
        421638,
        421727,
        421637,
        421726,
        421636,
        421635,
        421725,
        421634,
        421724,
        421633,
        421723,
        421632,
        421722,
        421631,
        421721,
        421630,
        421720,
        421629,
        421719,
        421718,
        421717,
        421624,
        421716,
        421623,
        421622,
        421715,
        421621,
        421714,
        421620,
        421713,
        421619,
        421712,
        421618,
        421711,
        421617,
        421710,
        421616,
        421709,
        421615,
        421614,
        421708,
        421613,
        421707,
        421612,
        421706,
        421611,
        421705,
        421610,
        421704,
        421609,
        421608,
        421703,
        421607,
        421702,
        421606,
        421701,
        421605,
        421700,
        421604,
        421699,
        421603,
        421698,
        421602,
        421697,
        421601,
        421600,
        421696,
        421599,
        421695,
        421598,
        421694,
        421597,
        421693,
        421596,
        421692,
        421595,
        421691,
        421594,
        421690,
        421593,
        421689,
        421592,
        421591,
        421688,
        421590,
        421687,
        421589,
        421686,
        421588,
        421685,
        421587,
        421684,
        421586,
        421585,
        421683,
        421584,
        421682,
        421583,
        421681,
        421582,
        421680,
        421581,
        421679,
        421580,
        421579,
        421678,
        421578,
        421377,
        421277,
        421276,
        421376,
        421275,
        421375,
        421274,
        421374,
        421273,
        421373,
        421272,
        421271,
        421372,
        421270,
        421371,
        421269,
        421370,
        421268,
        421369,
        421267,
        421368,
        421266,
        421367,
        421265,
        421264,
        421366,
        421263,
        421365,
        421262,
        421261,
        421260,
        421362,
        421259,
        421361,
        421258,
        421257,
        421360,
        421256,
        421359,
        421358,
        421357,
        421251,
        421356,
        421250,
        421355,
        421249,
        421248,
        421247,
        421246,
        421245,
        421244,
        421243,
        421242,
        421241,
        421240,
        421239,
        421238,
        421336,
        421237,
        421335,
        421236,
        421334,
        421235,
        421333,
        421234,
        421332,
        421233,
        421331,
        421232,
        421330,
        421231,
        421230,
        421329,
        421328,
        421229,
        421228,
        421327,
        421227,
        421226,
        421225,
        421224,
        421223,
        421222,
        421221,
        421220,
        421219,
        421218,
        421217,
        421216,
        421215,
        421214,
        421213,
        421212,
        421211,
        421210,
        421209,
        421208,
        421207,
        421206,
        421205,
        421204,
        421203,
        421202,
        421201,
        421285,
        421200,
        421199,
        421284,
        421198,
        421197,
        421196,
        421195,
        421194,
        421193,
        421192,
        421191,
        421190,
        421189,
        421188,
        421187,
        421186,
        421185,
        421184,
        421183,
        421182,
        421181,
        421180,
        421179,
        421074,
        421073,
        421072,
        421071,
        421070,
        421069,
        421068,
        421067,
        421066,
        421065,
        421064,
        421063,
        421062,
        421061,
        421060,
        421059,
        421058,
        421057,
        421056,
        421055,
        421054,
        421053,
        421052,
        421051,
        421050,
        421049,
        421048,
        421047,
        421046,
        421045,
        421044,
        421043,
        421042,
        421041,
        421040,
        421039,
        421038,
        421037,
        421036,
        421035,
        421034,
        421033,
        421032,
        421031,
        421030,
        421029,
        421028,
        421027,
        421026,
        421025,
        421024,
        421023,
        421022,
        421021,
        421020,
        421019,
        421018,
        421017,
        421016,
        421015,
        421014,
        421013,
        421012,
        421011,
        421010,
        421009,
        421008,
        421007,
        421006,
        421005,
        421004,
        421003,
        421002,
        421001,
        421000,
        420999,
        420998,
        420997,
        420996,
        420995,
        420989,
        420988,
        420987,
        420986,
        420985,
        420984,
        420983,
        420982,
        420981,
        420980,
        420979,
        420978,
        420777,
        420776,
        420775,
        420774,
        420773,
        420772,
        420771,
        420770,
        420769,
        420768,
        420767,
        420766,
        420765,
        420764,
        420763,
        420762,
        420761,
        420760,
        420759,
        420758,
        420757,
        420756,
        420755,
        420754,
        420753,
        420752,
        420751,
        420750,
        420749,
        420748,
        420747,
        420746,
        420745,
        420744,
        420743,
        420742,
        420741,
        420740,
        420739,
        420738,
        420737,
        420736,
        420735,
        420734,
        420733,
        420732,
        420731,
        420730,
        420729,
        420728,
        420727,
        420726,
        420725,
        420724,
        420723,
        420722,
        420716,
        420715,
        420714,
        420713,
        420712,
        420711,
        420710,
        420709,
        420708,
        420707,
        420706,
        420705,
        420704,
        420703,
        420702,
        420701,
        420700,
        420699,
        420698,
        420697,
        420696,
        420695,
        420694,
        420693,
        420692,
        420691,
        420690,
        420689,
        420688,
        420687,
        420686,
        420685,
        420684,
        420683,
        420682,
        420681,
        420680,
        420679,
        420678,
        420377,
        420376,
        420375,
        420374,
        420373,
        420372,
        420371,
        420370,
        420369,
        420368,
        420367,
        420366,
        420365,
        420364,
        420363,
        420362,
        420361,
        420360,
        420359,
        420358,
        420357,
        420356,
        420355,
        420354,
        420353,
        420352,
        420351,
        420350,
        420349,
        420348,
        420347,
        420346,
        420345,
        420344,
        420343,
        420330,
        420329,
        420328,
        420327,
        420318,
        420317,
        420316,
        420315,
        420314,
        420313,
        420312,
        420311,
        420310,
        420309,
        420308,
        420307,
        420306,
        420305,
        420304,
        420303,
        420302,
        420301,
        420300,
        420299,
        420298,
        420297,
        420296,
        420295,
        420294,
        420293,
        420292,
        420291,
        420290,
        420289,
        420288,
        420287,
        420286,
        420285,
        420284,
        420283,
        420282,
        420281,
        420280,
        420279,
        420278,
        420176,
        420175,
        420174,
        420173,
        420172,
        420171,
        420170,
        420169,
        420168,
        420167,
        420166,
        420165,
        420164,
        420163,
        420162,
        420161,
        420160,
        420159,
        420158,
        420157,
        420156,
        420155,
        420154,
        420153,
        420152,
        420144,
        420143,
        420142,
        420141,
        420140,
        420139,
        420138,
        420137,
        420136,
        420135,
        420134,
        420133,
        420132,
        420131,
        420130,
        420129,
        420128,
        420127,
        420126,
        420125,
        420124,
        420123,
        420122,
        420121,
        420120,
        420119,
        420118,
        420117,
        420116,
        420115,
        420114,
        420113,
        420112,
        420111,
        420110,
        420109,
        420108,
        420107,
        420106,
        420105,
        420104,
        420103,
        420102,
        420101,
        420100,
        420099,
        420098,
        420097,
        420096,
        420095,
        420094,
        420093,
        420092,
        420091,
        420090,
        420089,
        420088,
        420087,
        420086,
        420085,
        420084,
        420083,
        420082,
        420081,
        420080,
        420079,
        419970,
        419969,
        419968,
        419967,
        419966,
        419965,
        419964,
        419963,
        419962,
        419961,
        419954,
        419953,
        419952,
        419951,
        419950,
        419949,
        419948,
        419947,
        419946,
        419945,
        419944,
        419943,
        419942,
        419941,
        419940,
        419939,
        419938,
        419937,
        419936,
        419935,
        419934,
        419933,
        419932,
        419931,
        419930,
        419929,
        419928,
        419927,
        419926,
        419925,
        419924,
        419923,
        419922,
        419921,
        419920,
        419919,
        419918,
        419917,
        419916,
        419915,
        419914,
        419913,
        419912,
        419911,
        419910,
        419909,
        419908,
        419907,
        419906,
        419905,
        419904,
        419903,
        419902,
        419901,
        419900,
        419899,
        419898,
        419897,
        419896,
        419895,
        419894,
        419893,
        419892,
        419891,
        419890,
        419889,
        419888,
        419887,
        419886,
        419885,
        419884,
        419883,
        419873,
        419872,
        419871,
        419870,
        419869,
        419868,
        419867,
        419866,
        419865,
        419864,
        419863,
        419862,
        419861,
        419860,
        419859,
        419858,
        419857,
        419856,
        419855,
        419854,
        419853,
        419852,
        419851,
        419850,
        419849,
        419848,
        419847,
        419846,
        419845,
        419844,
        419843,
        419842,
        419841,
        419840,
        419839,
        419838,
        419837,
        419836,
        419835,
        419834,
        419833,
        419832,
        419831,
        419830,
        419829,
        419828,
        419827,
        419826,
        419825,
        419824,
        419823,
        419822,
        419821,
        419820,
        419819,
        419818,
        419817,
        419816,
        419815,
        419814,
        419813,
        419812,
        419811,
        419810,
        419809,
        419808,
        419807,
        419806,
        419805,
        419804,
        419803,
        419802,
        419801,
        419800,
        419791,
        419790,
        419789,
        419788,
        419785,
        419784,
        419783,
        419782,
        419779,
        419778,
        419777,
        419776,
        419760,
        419759,
        419758,
        419757,
        419755,
        419744,
        419743,
        419742,
        419741,
        419740,
        419739,
        419738,
        419737,
        419736,
        419735,
        419734,
        419733,
        419732,
        419731,
        419730,
        419729,
        419728,
        419727,
        419726,
        419725,
        419724,
        419723,
        419722,
        419721,
        419720,
        419719,
        419718,
        419717,
        419716,
        419704,
        419703,
        419702,
        419701,
        419700,
        419699,
        419698,
        419697,
        419696,
        419695,
        419694,
        419693,
        419692,
        419691,
        419690,
        419689,
        419688,
        419687,
        419686,
        419685,
        419684,
        419683,
        419682,
        419681,
        419680,
        419679,
        419678,
        419677,
        419676,
        419675,
        419673,
        419672,
        419671,
        419670,
        419669,
        419668,
        419667,
        419666,
        419665,
        419664,
        419663,
        419662,
        419661,
        419660,
        419659,
        419658,
        419657,
        419656,
        419655,
        419654,
        419653,
        419652,
        419651,
        419650,
        419649,
        419648,
        419647,
        419646,
        419645,
        419644,
        419643,
        419642,
        419631,
        419586,
        419585,
        419584,
        419583,
        419582,
        419581,
        419580,
        419579,
        419578,
        419577,
        419576,
        419575,
        419574,
        419573,
        419572,
        419571,
        419570,
        419569,
        419568,
        419567,
        419566,
        419565,
        419564,
        419563,
        419562,
        419561,
        419560,
        419559,
        419558,
        419557,
        419556,
        419555,
        419554,
        419553,
        419552,
        419551,
        419550,
        419549,
        419548,
        419547,
        419546,
        419545,
        419544,
        419543,
        419542,
        419541,
        419540,
        419539,
        419538,
        419537,
        419536,
        419535,
        419534,
        419533,
        419532,
        419531,
        419530,
        419529,
        419528,
        419527,
        419526,
        419525,
        419524,
        419523,
        419522,
        419521,
        419520,
        419519,
        419518,
        419517,
        419516,
        419515,
        419514,
        419513,
        419503,
        419501,
        419500,
        419499,
        419498,
        419497,
        419496,
        419495,
        419494,
        419493,
        419492,
        419491,
        419490,
        419489,
        419488,
        419487,
        419486,
        419485,
        419484,
        419483,
        419482,
        419481,
        419480,
        419479,
        419478,
        419477,
        419476,
        419475,
        419474,
        419272,
        419271,
        419270,
        419269,
        419268,
        419267,
        419266,
        419265,
        419264,
        419263,
        419262,
        419261,
        419260,
        419259,
        419258,
        419257,
        419256,
        419255,
        419254,
        419253,
        419252,
        419251,
        419250,
        419249,
        419248,
        419247,
        419246,
        419245,
        419244,
        419243,
        419242,
        419241,
        419240,
        419239,
        419238,
        419237,
        419236,
        419235,
        419234,
        419233,
        419223,
        419222,
        419221,
        419220,
        419219,
        419218,
        419341,
        419217,
        419216,
        419215,
        419214,
        419213,
        419212,
        419211,
        419210,
        419209,
        419208,
        419207,
        419206,
        419205,
        419204,
        419203,
        419202,
        419201,
        419200,
        419199,
        419198,
        419197,
        419196,
        419195,
        419194,
        419193,
        419192,
        419191,
        419190,
        419189,
        419188,
        419187,
        419186,
        419185,
        419184,
        419183,
        419182,
        419181,
        419180,
        419179,
        419178,
        419177,
        419176,
        419175,
        419174,
        419173,
        419072,
        419071,
        419070,
        419069,
        419068,
        419067,
        419066,
        419065,
        419064,
        419063,
        419062,
        419061,
        419060,
        419059,
        419058,
        419057,
        419056,
        419055,
        419054,
        419053,
        419052,
        419051,
        419050,
        419040,
        419039,
        419038,
        419036,
        419035,
        419034,
        419033,
        419032,
        419031,
        419030,
        419029,
        419028,
        419027,
        419026,
        419025,
        419024,
        419023,
        419022,
        419021,
        419020,
        419019,
        419018,
        419017,
        419016,
        419015,
        419014,
        419013,
        419012,
        419011,
        419010,
        419009,
        419008,
        419007,
        419006,
        419005,
        419004,
        419003,
        419002,
        419001,
        419000,
        418999,
        418998,
        418997,
        418996,
        418995,
        418994,
        418993,
        418992,
        418991,
        418990,
        418989,
        418988,
        418987,
        418986,
        418985,
        418984,
        418983,
        418982,
        418981,
        418980,
        418979,
        418978,
        418977,
        418976,
        418975,
        418974,
        418973,
        418672,
        418671,
        418670,
        418669,
        418668,
        418667,
        418666,
        418665,
        418664,
        418663,
        418653,
        418651,
        418650,
        418649,
        418648,
        418647,
        418646,
        418645,
        418644,
        418643,
        418642,
        418641,
        418640,
        418639,
        418707,
        418638,
        418637,
        418704,
        418636,
        418635,
        418634,
        418633,
        418632,
        418631,
        418630,
        418629,
        418628,
        418627,
        418626,
        418625,
        418624,
        418623,
        418622,
        418621,
        418620,
        418619,
        418618,
        418617,
        418616,
        418615,
        418614,
        418613,
        418612,
        418611,
        418610,
        418609,
        418608,
        418607,
        418606,
        418605,
        418604,
        418603,
        418602,
        418601,
        418600,
        418599,
        418598,
        418597,
        418596,
        418595,
        418594,
        418593,
        418592,
        418591,
        418590,
        418589,
        418588,
        418587,
        418586,
        418585,
        418584,
        418583,
        418582,
        418512,
        418440,
        418438,
        418436,
        418434,
        418432,
        418430,
        418428,
        418426,
        418424,
        418299,
        418297,
        418295,
        418293,
        418291,
        418289,
        418287,
        418285,
        418154,
        418175,
        418174,
        417863,
        417861,
        417842,
        417737,
        417735,
        417733,
        417731,
        417729,
        417727,
        417725,
        417723,
        417721,
        417719,
        417717,
        417715,
        417713,
        417444,
        417442,
        417440,
        417438,
        417436,
        417434,
        417432,
        417430,
        417428,
        417468,
        417426,
        417424,
        417422,
        417420,
        417418,
        417416,
        417414,
        417412,
        417410,
        417408,
        417406,
        417404,
        417402,
        417400,
        417398,
        417396,
        417394,
        417392,
        417390,
        417388,
        417386,
        417384,
        417382,
        417380,
        417368,
        417363,
        417322,
        417286,
        417284,
        417282,
        417280,
        417278,
        417276,
        417274,
        417272,
        417270,
        417268,
        417266,
        417264,
        417261,
        417259,
        417257,
        417255,
        417253,
        417251,
        417249,
        417247,
        417152,
        417149,
        417145,
        417143,
        417141,
        417139,
        417137,
        417135,
        417133,
        417131,
        417129,
        417127,
        417125,
        417123,
        417121,
        417119,
        417117,
        417115,
        417113,
        417111,
        417109,
        417107,
        417105,
        417103,
        417016,
        417001,
        416797,
        416795,
        416793,
        416791,
        416789,
        416787,
        416785,
        416783,
        416781,
        416779,
        416777,
        416775,
        416773,
        416771,
        416769,
        416767,
        416765,
        416763,
        416759,
        416702,
        416619,
        416538,
        416460,
        416454,
        416452,
        416450,
        416448,
        416433,
        416431,
        416429,
        416224,
        416188,
        416184,
        416157,
        416140,
        415980,
        415978,
        415976,
        415974,
        415972,
        415970,
        415968,
        415966,
        415964,
        415810,
        415770,
        415767,
        415765,
        415717,
        415715,
        415634,
        415632,
        415630,
        415628,
        415554,
        415517,
        415516,
        415515,
        415514,
        415492,
        415491,
        415490,
        415489,
        415488,
        415485,
        415483,
        415481,
        415479,
        415477,
        415475,
        415473,
        415471,
        415469,
        415467,
        415465,
        415463,
        415461,
        415459,
        415457,
        415455,
        415453,
        415451,
        415449,
        415395,
        415359,
        415356,
        415322,
        415198,
        415020,
        415018,
        415016,
        415014,
        415012,
        415010,
        415008,
        415006,
        415004,
        415002,
        415000,
        414998,
        414996,
        414994,
        414992,
        414990,
        414988,
        414986,
        414974,
        414889,
        411228,
        411227,
        411226,
        411225,
        411224,
        411207,
        411206,
        411205,
        411204,
        411203,
        411202,
        411201,
        411200,
        411199,
        411198,
        411197,
        411196,
        411195,
        411194,
        411193,
        411192,
        411191,
        411190,
        411189,
        411188,
        411187,
        411186,
        411185,
        411184,
        411176,
        411175,
        411174,
        411173,
        411172,
        411171,
        411170,
        411169,
        411168,
        411167,
        411166,
        411165,
        411164,
        411163,
        411162,
        411161,
        411160,
        411159,
        411158,
        411157,
        411156,
        411151,
        411150,
        410945,
        410944,
        323323,
        323322,
        323321,
        323320,
        323319,
        323318,
        323317,
        323316,
        323315,
        323314,
        323313,
        323312,
        323311,
        323310,
        323309,
        323308,
        323307,
        323306,
        323305,
        323304,
        323303,
        323302,
        323301,
        321954,
        321953,
        321952,
        321951,
        321950,
        321949,
        321948,
        321947,
        321946,
        321945,
        321944,
        321943,
        321942,
        321941,
        321940,
        321939,
        321938,
        321937,
        321936,
        321935,
        321927,
        321926,
        321716,
        321715,
        321714,
        321713,
        321712,
        321417,
        321416,
        321415,
        321414,
        321413,
        321412,
        321411,
        321410,
        321409,
        321408,
        321407,
        321406,
        321405,
        321404,
        321403,
        321402,
        321401,
        321400,
        321399,
        321398,
        321397,
        321396,
        321395,
        321394,
        321393,
        321392,
        321391
    ];

    var ret = {
        sucesso: [],
        erro: []
    }

    faturas_sem_preco_unitario.forEach(function(idInterno) {
        try {
            var loadReg = record.load({type: 'invoice', id: idInterno});

            for (i=0; i<loadReg.getLineCount('item'); i++) {
                var amount = loadReg.getSublistValue('item', 'amount', i);
                loadReg.setSublistValue('item', 'rate', i, amount);
            }
    
            loadReg.save({enableSourcing: true, ignoreMandatoryFields: true});
            ret.sucesso.push(idInterno);
            log.audit('Sucesso', ret.sucesso);           
        } catch(e) {
            ret.erro.push(idInterno);
            log.error('Erro', {idInterno: idInterno, msg: e, ret: ret.erro});            
        }        
    });

    return ret;
}

const _get = (context) => {
    log.audit('_get', context);
    
    var lookupSO = search.lookupFields({
        type: 'salesorder',
        id: 560492,
        columns: ['total']
    });
    log.audit('lookupSO', lookupSO);

    var arrayTransformers = [];

    for (i=0; i<9; i++) {     
        totalDividido = lookupSO.total / 9;
        log.audit(i, {totalDividido: totalDividido});
        log.emergency({
            title: 'dataTexte',
            details: new Date('09/09/2022')
        })

        var transformers = record.transform({
            fromType: 'salesorder',
            fromId: 560492,
            toType: 'invoice',
            isDynamic: true,
            // defaultValues:  {
            //     duedate: new Date('09/09/2022')
            // }
        });   
        log.audit('transformers', transformers);     

        transformers.setValue({
            fieldId: 'duedate',
            value: new Date('09/09/2022')
        })

        transformers.setValue({
            fieldId: 'custbody_lrc_fatura_principal',
            value: 560492
        })

        transformers.selectLine({
            sublistId: 'item',
            line: 0
        });

        transformers.setCurrentSublistValue({
            sublistId: 'item',
            fieldId: 'item', 
            value: 28650
        });

        transformers.setCurrentSublistValue({
            sublistId: 'item',
            fieldId: 'quantity', 
            value: 1
        });

        transformers.setCurrentSublistValue({
            sublistId: 'item',
            fieldId: 'rate', 
            value: totalDividido
        });

        transformers.commitLine({
            sublistId: 'item'
        });

        var id_transformers = transformers.save({enableSourcing: true, ignoreMandatoryFields: true});
        log.audit(i, {id_transformers: id_transformers});

        arrayTransformers.push(id_transformers);
    }

    return arrayTransformers;

    // var atualizarPedido = (function() { 
    //     try {
    //         var loadReg = record.load({type: 'salesorder', id: 445981});
    
    //         for (i=0; i<loadReg.getLineCount('item'); i++) {
    //             loadReg.setSublistValue('item', 'isclosed', i, false);
    //         }
    
    //         loadReg.setValue('custbody_rsc_tipo_transacao_workflow', 22)
    //         .setValue('custbody_rsc_status_contrato', 1)
    //         .setValue('custbody_lrc_fat_controle_escrituracao', '')
    //         .save({ignoreMandatoryFields: true});
    //         return {status: 'Sucesso'}
    //     } catch(e) {
    //         log.error('Erro atualizarPedido', e);
    //         return {status: e}
    //     }        
    // })();

    // var excluir_tabela_andamento_status = (function() { 
    //     var tabelaStatus = [];
    //     try {
    //         search.create({type: "customrecord_lrc_tab_andamento_status",
    //             filters: [
    //                ["custrecord_lrc_referente_faturamento","anyof","445981"]
    //             ],
    //             columns: [
    //                 "name","custrecord_lrc_hora_data_status_final","custrecord_lrc_escritura_encerrada","custrecord_lrc_ajuste_processo_associado","custrecord_lrc_ordem_criacao_tabela"
    //             ]
    //         }).run().each(function(result) {
    //             tabelaStatus.push(result.id);
    //             record.delete({type: 'customrecord_lrc_tab_andamento_status', id: result.id});
    //             return true;
    //         });

    //         return tabelaStatus;
    //     } catch(e) {
    //         log.error('Erro excluir_tabela_andamento_status', e);
    //         return {status: e}
    //     }        
    // })();

    // var excluir_ctrl_escrituracao = (function() { 
    //     var ctrEsc = [];
    //     try {
    //         search.create({type: "customrecord_lrc_controle_escrituracao",
    //             filters: [
    //                ["custrecord_lrc_fatura_de_venda","anyof","445981"]
    //             ],
    //             columns: [
    //                 "created","custrecord_lrc_fatura_de_venda","custrecord_lrc_cliente_ce","custrecord_lrc_empreendimento_fatura"
    //             ]
    //         }).run().each(function(result) {
    //             ctrEsc.push(result.id);
    //             record.delete({type: 'customrecord_lrc_controle_escrituracao', id: result.id});
    //             return true;
    //         });

    //         return ctrEsc;
    //     } catch(e) {
    //         log.error('Erro excluir_ctrl_escrituracao', e);
    //         return {status: e}
    //     }        
    // })();
    
    // var lookupEmpreendimento = (function() { 
    //     try {
    //         return search.lookupFields({type: 'job',
    //             id: 79770, // J020 Teste Normandie
    //             columns: ['calculatedenddate','custentity_rsc_matric_arq']
    //         });
    //     } catch(e) {
    //         log.error('Erro matricula', e);
    //         return {status: e}
    //     }        
    // })();

    // return {
    //     atualizarPedido: atualizarPedido,
    //     excluir_tabela_andamento_status: excluir_tabela_andamento_status,
    //     excluir_ctrl_escrituracao: excluir_ctrl_escrituracao,
    //     lookupEmpreendimento: lookupEmpreendimento
    // }
}

const _delete = (context) => {}

return {
    delete: _delete,
    get: _get2,
    // get: _get,
    post: _post2,
    // post: _post,
    put: _put
}
});
